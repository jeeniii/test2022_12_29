package controller;

import java.io.IOException;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import domain.MemberVO;
import service.MemberService;
import service.MemberServiceImpl;

@WebServlet("/mem/*")
public class MemberController extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private Logger log=LoggerFactory.getLogger(MemberController.class);
    private MemberService msv;
    private RequestDispatcher rdp;
    private String destPage;
    private int isOk;
    
    public MemberController() {
    	msv=new MemberServiceImpl();
    }

	protected void service(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
		req.setCharacterEncoding("utf-8");
		res.setCharacterEncoding("utf-8");
		res.setContentType("text/html; charset=utf-8");
		
		String uri=req.getRequestURI();
		String path=uri.substring(uri.lastIndexOf("/")+1);
		log.info("uri>> "+uri);
		log.info("path>> "+path);
		
		switch(path) {
		case "login":
			destPage="/member/login.jsp";
			break;
			
		case "join":
			destPage="/member/join.jsp";
			
			break;
			
		case "register":
			try {
				log.info("register check1");
				MemberVO mvo=new MemberVO(
						req.getParameter("id"),
						req.getParameter("pwd"),
						req.getParameter("nick_name"),
						req.getParameter("phone"),
						req.getParameter("addr1")+req.getParameter("addr2");
				
				if(
						mvo.getId()==""||
						mvo.getPwd()==""||
						mvo.getNick_name()==""||
						mvo.getPhone()=="") {
					log.info("Resend check");
					req.setAttribute("msg_register", "a");
					res.sendRedirect("/");
					return;
				}else {
					isOk=msv.register(new MemberVO(
							req.getParameter("id"),
							req.getParameter("pwd"),
							req.getParameter("nick_name"),
							req.getParameter("phone"),
							req.getParameter("addr1").concat(", ").concat(req.getParameter("addr2")));
					log.info("register check4");
					destPage="/";				
				}
			} catch (Exception e) {
				log.info("register error");
				e.printStackTrace();
			}
			break;
			
		case "login_auth": //실제 로그인이 일어나는 케이스
			try {
				MemberVO mvo=msv.login(new MemberVO(req.getParameter("id"),req.getParameter("pwd")));
				log.info("login check");
				if(mvo != null) {
					//세션 가져오기. 연결된 세션이 없다면 새로 생성
					HttpSession ses=req.getSession();
					//ses로 mvo를 바인딩
					ses.setAttribute("ses", mvo);
					ses.setMaxInactiveInterval(10*60);
					req.setAttribute("msg_login", true);
				}else {
					req.setAttribute("msg_login", false);
				}
				destPage="/";
			} catch (Exception e) {
				log.info("login_auth error");
				e.printStackTrace();
			}
			break;
			
		case "logout":
			try {
				HttpSession ses=req.getSession();
				ses.invalidate(); //무효화하다
				//로그인 정보 id를 주고 로그인 시간 update
				isOk=msv.lastLogin(req.getParameter("id"));
				log.info("check1");
				log.info("logout>> :"+(isOk>0?"Ok":"Fail"));
				destPage="/";
			} catch (Exception e) {
				log.info("logout error");
				e.printStackTrace();
			}
			break;
			
		case "list":
			try {
				log.info("list 1");
				List<MemberVO> list=msv.getList();
				req.setAttribute("list", list);
				log.info("list 4");
				destPage="/member/list.jsp";
			} catch (Exception e) {
				log.info("list error");
				e.printStackTrace();
			}
			break;
			
		case "modify":
			try {
				log.info("modify1");
				String id=req.getParameter("id");
				MemberVO mvo=msv.modify(id);
				req.setAttribute("mvo", mvo);
				log.info("modify4");
				destPage="/member/modify.jsp";
			} catch (Exception e) {
				log.info("modify error");
				e.printStackTrace();
			}
			break;
			
		case "update":
			try {
				log.info("update1");
				String id=req.getParameter("id");
				String pwd=req.getParameter("pwd");
				String nick_name=req.getParameter("nick_name");
				String phone=req.getParameter("phone");
				String addr=req.getParameter("addr1")+", "+req.getParameter("addr2");
				MemberVO mvo=new MemberVO(id,pwd,nick_name,phone,addr);
				isOk=msv.update(mvo);
				log.info("update4");
				if(isOk>0) {
					HttpSession ses=req.getSession();
					ses.setAttribute("ses", mvo);
					ses.setMaxInactiveInterval(10*60);
				}else {
					req.setAttribute("msg_update", 0);
				}
				log.info("controller update> "+(isOk>0?"ok":"fail"));
				destPage="/";
			} catch (Exception e) {
				log.info("update error");
				e.printStackTrace();
			}
			break;
			
		case "remove":
			try {
				log.info("remove1");
				String id=req.getParameter("id");
				HttpSession ses=req.getSession();
				ses.invalidate();
				isOk=msv.remove(id);
				destPage="/";
				log.info("remove4");
			} catch (Exception e) {
				log.info("remove error");
				e.printStackTrace();
				break;
				
			}
		default:
			break;
		}
		
		rdp=req.getRequestDispatcher(destPage);
		rdp.forward(req, res);
	}

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		service(request, response);
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		service(request, response);
	}

}
